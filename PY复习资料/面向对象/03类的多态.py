"""
    Python类中的多态，其实就是类中方法的重写：
        1. 定义一个base类，即父类
        2. 定义多个子类，每个子类中重写父类中的某个方法
        3. 假定我们定义了某个函数，传入了base类的不同的子类，再执行子类的某个函数，那么就会执行不同的方法，此即为多态；
"""

class Animal:
    def run(self):
        print("run")

class Dog(Animal):
    def run(self):
        # 可以继承父类的，当然也可以重写
        # return super().run()
        print("dog run")

d = Dog()
d.run()

"""
    Python多态有两个原则，即开闭原则；
        1. 开放原则：允许增加base类的子类并重写某个方法
        2. 封闭原则：不需要修改base类中的方法，毕竟多个类引用了，修改不一定引起什么；
    
    并且，Python中的参数是没有类型限制的，所以多态在Python中体现的不很明显，而在C#，java中体现的比较明显了；
    在Python中更多体现的是鸭子类型，不需要严格的继承体系，只要像（即有相同的方法就行），像鸭子，但是不是鸭子，那么我们也认为它是个鸭子；
"""