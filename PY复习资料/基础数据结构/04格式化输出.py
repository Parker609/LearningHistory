"""
    讲一下%s和format的用法，语法比较老式，但是兼容性会好一些。
"""

"""
    一、基本格式化格式，%s（旧版）和format（新版，支持索引）
"""

str1 = '%s的名字是%s%d'%('小明', '小明', 123)
print(str1)
# 支持索引
str2 = '{1}的年纪是{0}'.format(123, '张三')
print(str2)

"""
    二、填充和对齐和截断
        1. format可以固定字符串长度，{:10}，长度为10的，但是如果format里数据长度不够，需要占位符
        2. 左对齐:<， 右对齐:>，居中对齐:^
        3. 格式{:占位符 对齐符 长度}.format(填充内容)
        4. 截断，是当固定长度小于填充长度的时候，固定长度无效，但是强制截断用.，是要先截断在填充的
"""
# 1. 填充和对齐
print('{:_<10}'.format('left')) # 左对齐
print('{:_>10}'.format('left')) # 右对齐
print('{:_^10}'.format('left')) # 居中对齐

# 2. 截断
print('{:.4}'.format('hello world!')) # 截断4个
print('{:_>10.4}'.format('hello world!!!!!!')) #先截断，后填充

# 3. 注意，format里边传入数字，字符串里边是会隐式转换成字符串的，这块有点性能消耗（判断原类型），其实可以用d、f之类的加入判断
print('{:_>10d}'.format(1))
print('{:_>10.3f}'.format(3.14159265)) # float类的话，.之后的代表小数点后边的位数
print('{:_>+10.3f}'.format(3.14159265)) # 里边的10代表的是总长度，总长度一般是失效的，+代表暴露数字正负号

# 4 在总长度前边加空格，可以对齐
print('{:_> 10.3f}'.format(-3.14159265)) # 里边的10代表的是总长度，总长度一般是失效的，+代表暴露数字正负号

"""
    PS、特殊格式输出：f，f是format的简单写法
"""

word_1 = 'abc'
print(f'{word_1}的值是多少？')