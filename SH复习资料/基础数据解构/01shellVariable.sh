# shell里的变量大概可以分为三种：
# 1. 局部变量，只在本次shell里定义且使用的变量，在其他的shell里启动则不会被使用；
# 2. 环境变量，基本上所有的程序，包括启动shell的程序都能使用的环境变量，有时是作为，必要的时候，也可以通过shell定义环境变量，常用的就是定义文件的位置的环境变量；
# 3. shell变量，由shell定义的变量，一部分是局部变量，一部分是环境变量；
# 4. 关键字local的变量，只能在函数中使用；（不大明白这个意义）

readonly NAME='dd'
echo $NAME
# NAME=123 会报错，因为是只读变量

# 创建环境变量 export 关键字，环境变量是在这次用户登录的范围内使用，如果用户退出了或者注销，下次登录的话这个变量就没了；
export ENV_VAR='环境变量'
# ENV_VAR=123 // 这块竟然不报错
echo ${ENV_VAR}

# 创建局部变量：关键字local，定义的变量只能在函数中使用：can only be used in a function
# local B = '局部变量'

# 删除变量，将变量直接删掉了，但是不能删除readonly常量
# unset NAME 会报错

unset A
echo $A # 拿不到值，访问不到了

# 变量赋值和使用
# 注意：变量的赋值用登号：=，但是等号左右不能有空格，毕竟是一门命令语言，有空格会将空格切分，并把切分的部分都理解为单独的命令；
# 注意：一般命名变量的时候要大写，和其他所有的语言都不大一样呢；
A='变量' # 注意：没有分号，sql的命令是要有分号的，但是bash的没有；

# 变量使用：
# 1. $A，用$符号来调用变量，但是更推荐第二种
# 2. ${A}
echo ${A}

# 定义变量时使用的符号：单引号、双引号和``符号；
# 1. 单引号和双引号功能差不多，但是在单引号中不能用${}来插入变量，比如
echo '本来想输出的变量的内容是${A}' # 发现了么，颜色都不一样了，呵呵呵呵；
echo "本来想输出的变量的内容是${A}"

# 2. ``的功能，这个和js完全不一样，``里边的内容会被执行，这块需要注意，执行之后返回的东西会被当做另外一个命令
# 如 date 命令会返回当前的日期，若`date`会返回时间，并将时间作为命令行执行，这是有问题的；感觉像是执行了一个函数，并获取返回值一样；
d=`date`
echo $d

# 如果不想使用这个符号，可以使用$()来代替；

# 3. 变量类型声明：declare，注意：变量没有bool类型和浮点数
# 变量赋值的时候，默认都是字符串类型的，比方说：
sum=100+100+200
echo ${sum} # 输出 100+100+200

# 但是如果把sum定义为int类型
declare -i sum=100+200+300
echo ${sum} # 输出600

# declare -[aixr] variable
# a array
# i int
# x export
# r readonly
# 如果用+的话，就是将参数反转，添加变成删除


# shell里的集合类型：数组，map
# 数组定义：用圆括号来表示，数组元素之间用空格来隔离，使用的话还是用[]来表示；
ARR_NAME=(1 2 300 4 5)

# 数组元素访问：用[]来访问，数组下标依旧从0开始，如果要输出所有的，可以用* 或者 @
echo ${ARR_NAME[2]}
echo ${ARR_NAME[@]}
echo ${ARR_NAME[*]}

echo ${#ARR_NAME[2]} #输出数组中某个元素的长度
echo ${#sum} #输出某个元素的长度，相当于length？但是针对数字无效

# map，相当于字典，在bash4.0以上才能用，命令行个人认为就不要用kv模式了，先不看了，后续遇到时再看也可以，竟然是键值对，发明语言的就不能把语言都定义成一个么。。。
# map的定义和使用，也是用()，其余操作都差不多
# declare -A m=(["a"]="8888" ["b"]="1000")
# echo ${m["a"]}

# 预定义变量，通常用来接收命令行传入的变量
# $0 脚本的名称
# $1~9 执行脚本时输入的第1~第9个参数名
# $# 命令行参数个数 #总和个数有关
# $@ $* 所有的命令行参数
# $? 前一个命令的退出状态
# $$ 执行的进程id

echo "print $"
echo $0 # 直接把脚本的绝对路径弄出来了
echo $1 # 可以运行脚本看一看
echo $*
echo $@
echo $?
echo $$

# 场景环境变量 HOME PATH TERM PWD UID
echo ${HOME} # 用户主目录
echo ${PATH} # 系统的所有环境变量path，不是当前的哦
echo ${TERM} # 当前终端，不是很理解
echo ${PWD} # 当前工作目录，绝对路径
echo ${UID} # 当前用户id userid